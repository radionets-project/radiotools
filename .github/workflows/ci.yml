name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:

env:
  MPLBACKEND: Agg
  PYTEST_ADDOPTS: --color=yes
  GITHUB_PR_NUMBER: ${{ github.event.number }}

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.11"
            install-method: mamba

          - os: ubuntu-latest
            python-version: "3.12"
            install-method: mamba

          - os: ubuntu-latest
            python-version: "3.12"
            install-method: uv

          # macos 13 image is x86-based
          - os: macos-13
            python-version: "3.11"
            install-method: uv

          # macos 14 image is arm64 based
          - os: macos-14
            python-version: "3.12"
            install-method: mamba

    defaults:
      run:
        # We need login shells (-l) for micromamba to work.
        shell: bash -leo pipefail {0}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: astral-sh/setup-uv@v6
        with:
            python-version: ${{ matrix.python-version }}

      - name: Prepare mamba installation
        if: matrix.install-method == 'mamba' &&  contains(github.event.pull_request.labels.*.name, 'documentation-only') == false
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          # setup correct python version
          sed -i -e "s/- python.*/- python=$PYTHON_VERSION/g" environment.yml

      - name: mamba setup
        if: matrix.install-method == 'mamba' &&  contains(github.event.pull_request.labels.*.name, 'documentation-only') == false
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: environment.yml
          cache-downloads: true

      - name: Install dependencies
        if: matrix.install-method == 'mamba'
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          python --version
          uv pip install --upgrade pip
          uv pip install --group tests -e .
          uv pip freeze
          uv pip list

      - name: Install dependencies
        if: matrix.install-method == 'uv'
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          python --version
          uv sync --group dev

      - name: List installed package versions (conda)
        if: matrix.environment-type == 'mamba'
        run: micromamba list

      - name: Tests
        run: |
          pytest -vv --cov --cov-report=xml --junitxml=junit.xml -o junit_family=legacy

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: astral-sh/setup-uv@v6

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install doc dependencies
        run: |
          sudo apt update --yes && sudo apt install --yes git
          uv pip install --system . -U pip towncrier
          uv pip install --system . --group docs -e .
          git describe --tags

      - name: Build docs
        run: make -C docs html

      - name: Produce Changelog
        run: |
          towncrier build --yes --version==0.0.0
